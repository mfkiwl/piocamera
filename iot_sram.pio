.program iot_sram

;    (MSB)<--- {nCS,SCLK,D3,D2,D1,D0} --->(LSB)
;    dat_base : D[3:0]
;    sig_base : {nCS,SCLK}

.side_set 2

_start0: 
    ;pull    block          side 0x02;
    out     x, 32           side 0x02; x <= osr
    out     y, 32           side 0x02; y <= osr
    set     pindirs,0x0f    side 0x02; pindir
write0:
    out     pins,4          side 0x00; sclk=0
    jmp     x--  write0     side 0x01; sclk=1
read0:
    jmp     !y  end0        side 0x01; if !y goto end
    set     pindirs,0x0     side 0x00; pindir & sclk=0
    mov     isr,null        side 0x01;
    set     x, 7            side 0x01; x=8-1
read1:
    nop                     side 0x00;  dummy 8-clock
    jmp     x-- read1       side 0x01;
read2:
    in      pins,4          side 0x00 ; sclk=1
    jmp     y-- read2       side 0x01 ; sclk=0
    nop                     side 0x03;
end0:
    mov     isr, null       side 0x02;
    jmp     _start0         side 0x02; sclk=0, nCS=1


% c-sdk {
static inline void iot_sram_program_init( PIO pio, uint32_t sm, uint32_t offset, uint32_t dat_base , uint32_t dat_pin_num, uint32_t signal_base, uint32_t signal_pin_num)
{
    /* 
     (MSB)<--- {nCS,SCLK,D3,D2,D1,D0} --->(LSB)
     dat_base : D[3:0]
     sig_base : {nCS,SCLK}
    */

    pio_sm_config c = iot_sram_program_get_default_config( offset );

    sm_config_set_out_pins( &c, dat_base, dat_pin_num);     // D[3:0]
    sm_config_set_in_pins( &c, dat_base );                  // D[3:0]
    sm_config_set_set_pins(&c, dat_base, dat_pin_num);
    sm_config_set_sideset_pins(&c, signal_base);            // {nCS,SCLK}
    
    sm_config_set_in_shift( &c, false, true, 32);
    sm_config_set_out_shift( &c, false, true, 32);          //auto pull

    
    {
        uint32_t pin_offset;
        for ( pin_offset = 0; pin_offset < dat_pin_num; pin_offset++ )
        {
            pio_gpio_init( pio, dat_base + pin_offset );
        }

        for ( pin_offset = 0; pin_offset < signal_pin_num; pin_offset++ )
        {
            pio_gpio_init( pio, signal_base + pin_offset );
        }
    }

    pio_sm_set_consecutive_pindirs( pio, sm, dat_base, dat_pin_num, true );
    pio_sm_set_consecutive_pindirs( pio, sm, signal_base, signal_pin_num, true );

    uint32_t dat_mask = 0x0f;                                   // D[3:0] = 0b1111
    pio_sm_set_pindirs_with_mask(pio, sm, dat_mask, dat_mask );

    sm_config_set_clkdiv( &c, 1);

    pio_sm_init( pio, sm, offset, &c );
    pio_sm_set_enabled( pio, sm, true );
}
%}